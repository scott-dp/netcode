# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "18.0"

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


      - name: Run clang-tidy 1
        run: |
            # Copy compile_commands.json to root for clang-tidy
            copy ${{github.workspace}}\build\compile_commands.json ${{github.workspace}}\compile_commands.json
            
            # Run clang-tidy on all cpp files
            Get-ChildItem -Path src -Filter *.cpp | ForEach-Object {
              Write-Host "Running clang-tidy on $($_.Name)"
              clang-tidy $_.FullName
            }
        shell: powershell

      - name: Run clang-tidy (alternative with specific checks) 2
        run: |
                # Run with specific checks and treat warnings as errors
                clang-tidy src/*.cpp -p=${{github.workspace}}/build --checks="-*,readability-*,performance-*,modernize-*,bugprone-*" --warnings-as-errors="*"
        continue-on-error: true  # Set to false if you want to fail the build on clang-tidy issues

